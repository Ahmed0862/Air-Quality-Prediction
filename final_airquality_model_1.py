# -*- coding: utf-8 -*-
"""Final  AirQuality model 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r8uryisBchvcYhGyULCVXj1Yfx-CpxnO
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df1 = pd.read_csv("/content/drive/MyDrive/city_day.csv")
df1['Date'] = pd.to_datetime(df1['Date'])
df1.rename(columns = {'AQI_Bucket':'Air_quality'}, inplace = True)
df1.head()

df1.info()

df1['City'].value_counts()

df1.shape

target = df1.loc[:,'Air_quality']

df1 = df1.drop(columns=['City','Date'])
df1

df1.isnull()

df1.isnull().value_counts

df1['PM2.5']=df1['PM2.5'].fillna((df1['PM2.5'].median()))
df1['PM10']=df1['PM10'].fillna((df1['PM10'].median()))
df1['NO']=df1['NO'].fillna((df1['NO'].median()))
df1['NO2']=df1['NO2'].fillna((df1['NO2'].mean()))
df1['NOx']=df1['NOx'].fillna((df1['NOx'].mean()))
df1['NH3']=df1['NH3'].fillna((df1['NH3'].median()))
df1['CO']=df1['CO'].fillna((df1['CO'].mean()))
df1['SO2']=df1['SO2'].fillna((df1['SO2'].median()))
df1['O3']=df1['O3'].fillna((df1['O3'].median()))
df1['Benzene']=df1['Benzene'].fillna((df1['Benzene'].median()))
df1['Toluene']=df1['Toluene'].fillna((df1['Toluene'].median()))
df1['Xylene']=df1['Xylene'].fillna((df1['Xylene'].median()))
df1['AQI']=df1['AQI'].fillna((df1['AQI'].median()))
df1['Air_quality']=df1['Air_quality'].fillna('Moderate')

df1

df1['Air_quality'].value_counts()

df1['Air_quality'] = df1['Air_quality'].replace(['Severe'],1)
df1['Air_quality'] = df1['Air_quality'].replace(['Very Poor'],2)
df1['Air_quality'] = df1['Air_quality'].replace(['Poor'],3)
df1['Air_quality'] = df1['Air_quality'].replace(['Moderate'],4)
df1['Air_quality'] = df1['Air_quality'].replace(['Good'],5)
df1['Air_quality'] = df1['Air_quality'].replace(['Satisfactory'],6)

df1

df1.isna().value_counts

corr = df1.corr()
sns.heatmap(corr)

data_cor = df1.corr()
plt.figure(figsize = (10,10))
sns.heatmap(data_cor,annot = True,square = True,linewidths = 1,cmap = 'coolwarm')

x = df1.iloc[:,:12].values
y = df1.iloc[:,13].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size = 0.2 ,stratify = df1['Air_quality'])

"""MinMax normalization"""

from sklearn.preprocessing import StandardScaler,MinMaxScaler,normalize
mm = MinMaxScaler()
x_train = mm.fit_transform(x_train)
x_test = mm.transform(x_test)

"""support Vector machine Classification"""

from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
cls=SVC(kernel='linear',random_state=0)
cls.fit(x_train,y_train)
svmpred=cls.predict(x_test)
svmpred
cm=confusion_matrix(y_test,svmpred)
print("confussion matrix")
print(cm)
print("\n")
accuracy=accuracy_score(y_test,svmpred)
print("accuracy",accuracy*100)

from sklearn.metrics import classification_report
print(classification_report(y_test,svmpred))

"""Random Forest classification"""

from sklearn.ensemble import RandomForestClassifier
classifier= RandomForestClassifier(n_estimators= 10, criterion="entropy")
classifier.fit(x_train, y_train)

y_pred= classifier.predict(x_test)

"""Confusion matrix"""

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
cm= confusion_matrix(y_test, y_pred)
print(cm)
accuracy=accuracy_score(y_test,y_pred)
print("accuracy",accuracy*100)

"""Classification Report"""

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

"""Boosting using Adaboost"""

from sklearn.ensemble import AdaBoostClassifier
adaboost = AdaBoostClassifier(base_estimator=classifier, n_estimators=10, learning_rate=0.3, random_state=25)
adaboost.fit(x_train, y_train)

print(f"Train score: {adaboost.score(x_train, y_train)}")
print(f"Test score: {adaboost.score(x_test, y_test)}")

"""Dimensionality reduction using QDA(Quadratic Discriminant Analysis)"""

from imblearn.over_sampling import SMOTE
from collections import Counter

smote = SMOTE()
x_smote_resampled,y_smote_resampled = smote.fit_resample(x_train,y_train)
print("SMOTE")
print("Before Resampling  : ",sorted(Counter(y_train).items()))
print("After Resampling : ",sorted(Counter(y_smote_resampled).items()))

from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
cls=SVC(kernel='linear',random_state=0)
cls.fit(x_smote_resampled,y_smote_resampled)
svmpred=cls.predict(x_test)
cm=confusion_matrix(y_test,svmpred)
print("confussion matrix")
print(cm)
print("\n")
accuracy=accuracy_score(y_test,svmpred)
print("accuracy",accuracy*100)

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

from sklearn.ensemble import RandomForestClassifier
classifier= RandomForestClassifier(n_estimators= 10, criterion="entropy")
classifier.fit(x_train, y_train)

y_pred= classifier.predict(x_test)

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
cm= confusion_matrix(y_test, y_pred)
print(cm)
accuracy=accuracy_score(y_test,y_pred)
print("accuracy",accuracy*100)

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

from sklearn.ensemble import AdaBoostClassifier
adaboost = AdaBoostClassifier(base_estimator=classifier, n_estimators=10, learning_rate=0.3, random_state=25)
adaboost.fit(x_train, y_train)

print(f"Train score: {adaboost.score(x_train, y_train)}")
print(f"Test score: {adaboost.score(x_test, y_test)}")

# Commented out IPython magic to ensure Python compatibility.
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis
from sklearn.metrics import confusion_matrix, classification_report, precision_score
# %matplotlib inline
qda = QuadraticDiscriminantAnalysis()
model = qda.fit(x_train, y_train)

from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
cls=SVC(kernel='linear',random_state=0)
cls.fit(x_train,y_train)
svmpred=cls.predict(x_test)
cm=confusion_matrix(y_test,svmpred)
print("confussion matrix")
print(cm)
print("\n")
accuracy=accuracy_score(y_test,svmpred)
print("accuracy",accuracy*100)

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

from sklearn.ensemble import RandomForestClassifier
classifier= RandomForestClassifier(n_estimators= 10, criterion="entropy")
classifier.fit(x_train, y_train)

y_pred= classifier.predict(x_test)

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
cm= confusion_matrix(y_test, y_pred)
print(cm)
accuracy=accuracy_score(y_test,y_pred)
print("accuracy",accuracy*100)

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

from sklearn.ensemble import AdaBoostClassifier
adaboost = AdaBoostClassifier(base_estimator=classifier, n_estimators=10, learning_rate=0.3, random_state=25)
adaboost.fit(x_train, y_train)

print(f"Train score: {adaboost.score(x_train, y_train)}")
print(f"Test score: {adaboost.score(x_test, y_test)}")